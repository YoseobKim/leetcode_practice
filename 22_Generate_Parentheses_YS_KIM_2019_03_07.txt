이 문제는 n=3 이라고 하면 3개의 괄호를 가능한 경우만 모든 조합으로 보여주는 것이다.
[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]
이 문제를 풀기 위해 나는 열리는 괄호의 index 에 주목했다.
n = 1
0 1
( ) : 0
n = 2
0 1 2 3
( ( ) ) : 0, 1
( ) ( ) : 0, 2
n = 3
0 1 2 3 4 5
( ( ( ) ) ) : 0, 1, 2
( ( ) ( ( ) : 0, 1, 3
( ( ) ) ( ) : 0, 1, 4
( ) ( ( ) ) : 0, 2, 3
( ) ( ) ( ) : 0, 2, 4
이처럼 뭔가 규칙을 가지고 확장을 하는 것을 알 수 있는데,
제약사항을 넣으면 더 명확해진다.
이는 가장 끝 index 에는 닫는 괄호 ) 를 넣어야 해서 거기까지는 여는 괄호의 인덱스가 갈 수 없다는 점이었다.
이를 잘 생각해서 보면
n = 2 는 n = 1 에서 확장하여 가장 끝까지 간 경우이다.
n = 3 은 n = 2 에서 확장하여 가장 끝까지 간 경우이다.
이를 알고리즘으로 구현하면 recursive 하게 풀 수 있음을 알 수 있다.
        List<List<Integer>> prev = makeOpenParenthesisList(n - 1);
        for(List<Integer> list : prev) {
            for(int i = list.get(list.size() - 1) + 1; i < maxOpenParenthesisIdx; i++) {
                List<Integer> newList = new ArrayList<>();
                newList.addAll(list);
                newList.add(i);
                ret.add(newList);
            }
        }
 이를 활용하여 모두 ) 로 채운 스트링에 위의 계산값으로 나온 결과 인덱스만 ( 로 바꾸는 방식으로 풀었다.
