이 문제는
1(   )  2(abc)  3(def)
4(ghi)  5(jkl)  6(mno)
...
이런 키패드가 있다고 가정하고
Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].

이와 같은 조합을 만들어내는 문제이다.

테스트 결과 *, # 은 답안에서도 처리되지 않아 무시하였고, 
이에 따라 이 문제를 풀기 위해서 다음의 키패드를 미리 저장해 두었다.
    private final String[][] DIGITS_LETERS_MAP = {
        {""},
        {""},
        {"a", "b", "c"},
        {"d", "e", "f"},
        {"g", "h", "i"},
        {"j", "k", "l"},
        {"m", "n", "o"},
        {"p", "q", "r", "s"},
        {"t", "u", "v"},
        {"w", "x", "y", "z"}
        // according to my test result, *, # are not needed to be processed.
    };
    
주어진 문자열을 캐릭터 어레이로 변환하고 돌면서 숫자로 변환시킨 후 
List<List<String>> candidates = new ArrayList<>();
이렇게 생긴 어레이에 
int num = ((int)digit - 48);
candidates.add(Arrays.asList(DIGITS_LETERS_MAP[num]));
이렇게 넣어 candidates 를 만들었다.

이후 recursive 하게 set 을 만드는 함수에 String List 의 set 들을 넣어 풀었는데
셋을 만드는 원리는 다음과 같다.
a,b,c
d,e,f
가 candidate 라면
a + d, a + e, a + f,
b + d, b + e, b + f,
...
가 합한 글자들의 셋이 될 것이다.
a,b,c
d,e,f
g,h,i
가 candidate 라면
{abc, def 의 모든 조합} + {g, h, i}
가 될 것이다.
e.g 
ad + g, ad + h, ad + i,
ae + g, ae + h, ae + i,
...
따라서 
        int mid = sets.size() / 2;
        List<List<String>> head = sets.subList(0, mid);
        List<List<String>> tail = sets.subList(mid, sets.size());
        
        List<String> set1 = recursiveSetMaker(head);      
        List<String> set2 = recursiveSetMaker(tail);
이렇게 재귀를 해주면 된다.
